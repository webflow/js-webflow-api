/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { WebflowClient } from "../../../src/Client";

describe("Items", () => {
    test("list-items", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            items: [
                {
                    id: "62b720ef280c7a7a3be8cabe",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca3",
                    lastPublished: "2022-06-30T13:35:20.878Z",
                    lastUpdated: "2022-06-25T14:51:27.809Z",
                    createdOn: "2022-06-25T14:51:27.809Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Senior Data Analyst", slug: "senior-data-analyst" },
                },
                {
                    id: "62c880ef281c7b7b4cf9dabc",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca3",
                    lastPublished: "2023-04-15T10:25:18.123Z",
                    lastUpdated: "2023-04-10T11:45:30.567Z",
                    createdOn: "2023-04-10T11:45:30.567Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Product Manager", slug: "product-manager" },
                },
            ],
            pagination: { limit: 25, offset: 0, total: 2 },
        };
        server
            .mockEndpoint()
            .get("/collections/580e63fc8c9a982ac9b8b745/items")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.listItems("580e63fc8c9a982ac9b8b745");
        expect(response).toEqual({
            items: [
                {
                    id: "62b720ef280c7a7a3be8cabe",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca3",
                    lastPublished: "2022-06-30T13:35:20.878Z",
                    lastUpdated: "2022-06-25T14:51:27.809Z",
                    createdOn: "2022-06-25T14:51:27.809Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Senior Data Analyst",
                        slug: "senior-data-analyst",
                    },
                },
                {
                    id: "62c880ef281c7b7b4cf9dabc",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca3",
                    lastPublished: "2023-04-15T10:25:18.123Z",
                    lastUpdated: "2023-04-10T11:45:30.567Z",
                    createdOn: "2023-04-10T11:45:30.567Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Product Manager",
                        slug: "product-manager",
                    },
                },
            ],
            pagination: {
                limit: 25,
                offset: 0,
                total: 2,
            },
        });
    });

    test("create-item", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        const rawResponseBody = {
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        server
            .mockEndpoint()
            .post("/collections/580e63fc8c9a982ac9b8b745/items")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.createItem("580e63fc8c9a982ac9b8b745", {
            body: {
                isArchived: false,
                isDraft: false,
                fieldData: {
                    name: "Pan Galactic Gargle Blaster Recipe",
                    slug: "pan-galactic-gargle-blaster",
                },
            },
        });
        expect(response).toEqual({
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: {
                name: "Pan Galactic Gargle Blaster Recipe",
                slug: "pan-galactic-gargle-blaster",
            },
        });
    });

    test("delete-items", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = { items: [{ id: "580e64008c9a982ac9b8b754" }] };

        server
            .mockEndpoint()
            .delete("/collections/580e63fc8c9a982ac9b8b745/items")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.collections.items.deleteItems("580e63fc8c9a982ac9b8b745", {
            items: [
                {
                    id: "580e64008c9a982ac9b8b754",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("update-items", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            items: [
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    fieldData: { name: "Ne Paniquez Pas", slug: "ne-paniquez-pas" },
                },
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    fieldData: { name: "No Entrar en Pánico", slug: "no-entrar-en-panico" },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    fieldData: { name: "Au Revoir et Merci pour Tous les Poissons", slug: "au-revoir-et-merci" },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    fieldData: { name: "Hasta Luego y Gracias por Todo el Pescado", slug: "hasta-luego-y-gracias" },
                },
            ],
        };
        const rawResponseBody = {
            items: [
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Ne Paniquez Pas", slug: "ne-paniquez-pas" },
                },
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "No Entrar en Pánico", slug: "no-entrar-en-panico" },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Au Revoir et Merci pour Tous les Poissons", slug: "au-revoir-et-merci" },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Hasta Luego y Gracias por Todo el Pescado", slug: "hasta-luego-y-gracias" },
                },
            ],
            pagination: { limit: 25, offset: 0, total: 4 },
        };
        server
            .mockEndpoint()
            .patch("/collections/580e63fc8c9a982ac9b8b745/items")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.updateItems("580e63fc8c9a982ac9b8b745", {
            items: [
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    fieldData: {
                        name: "Ne Paniquez Pas",
                        slug: "ne-paniquez-pas",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    fieldData: {
                        name: "No Entrar en P\u00E1nico",
                        slug: "no-entrar-en-panico",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    fieldData: {
                        name: "Au Revoir et Merci pour Tous les Poissons",
                        slug: "au-revoir-et-merci",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    fieldData: {
                        name: "Hasta Luego y Gracias por Todo el Pescado",
                        slug: "hasta-luego-y-gracias",
                    },
                },
            ],
        });
        expect(response).toEqual({
            items: [
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Ne Paniquez Pas",
                        slug: "ne-paniquez-pas",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "No Entrar en P\u00E1nico",
                        slug: "no-entrar-en-panico",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Au Revoir et Merci pour Tous les Poissons",
                        slug: "au-revoir-et-merci",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Hasta Luego y Gracias por Todo el Pescado",
                        slug: "hasta-luego-y-gracias",
                    },
                },
            ],
            pagination: {
                limit: 25,
                offset: 0,
                total: 4,
            },
        });
    });

    test("list-items-live", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            items: [
                {
                    id: "62b720ef280c7a7a3be8cabe",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca3",
                    lastPublished: "2022-06-30T13:35:20.878Z",
                    lastUpdated: "2022-06-25T14:51:27.809Z",
                    createdOn: "2022-06-25T14:51:27.809Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Senior Data Analyst", slug: "senior-data-analyst" },
                },
                {
                    id: "62c880ef281c7b7b4cf9dabc",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca3",
                    lastPublished: "2023-04-15T10:25:18.123Z",
                    lastUpdated: "2023-04-10T11:45:30.567Z",
                    createdOn: "2023-04-10T11:45:30.567Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Product Manager", slug: "product-manager" },
                },
            ],
            pagination: { limit: 25, offset: 0, total: 2 },
        };
        server
            .mockEndpoint()
            .get("/collections/580e63fc8c9a982ac9b8b745/items/live")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.listItemsLive("580e63fc8c9a982ac9b8b745");
        expect(response).toEqual({
            items: [
                {
                    id: "62b720ef280c7a7a3be8cabe",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca3",
                    lastPublished: "2022-06-30T13:35:20.878Z",
                    lastUpdated: "2022-06-25T14:51:27.809Z",
                    createdOn: "2022-06-25T14:51:27.809Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Senior Data Analyst",
                        slug: "senior-data-analyst",
                    },
                },
                {
                    id: "62c880ef281c7b7b4cf9dabc",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca3",
                    lastPublished: "2023-04-15T10:25:18.123Z",
                    lastUpdated: "2023-04-10T11:45:30.567Z",
                    createdOn: "2023-04-10T11:45:30.567Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Product Manager",
                        slug: "product-manager",
                    },
                },
            ],
            pagination: {
                limit: 25,
                offset: 0,
                total: 2,
            },
        });
    });

    test("create-item-live", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        const rawResponseBody = {
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        server
            .mockEndpoint()
            .post("/collections/580e63fc8c9a982ac9b8b745/items/live")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.createItemLive("580e63fc8c9a982ac9b8b745", {
            body: {
                isArchived: false,
                isDraft: false,
                fieldData: {
                    name: "Pan Galactic Gargle Blaster Recipe",
                    slug: "pan-galactic-gargle-blaster",
                },
            },
        });
        expect(response).toEqual({
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: {
                name: "Pan Galactic Gargle Blaster Recipe",
                slug: "pan-galactic-gargle-blaster",
            },
        });
    });

    test("delete-items-live", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = { items: [{ id: "580e64008c9a982ac9b8b754" }] };

        server
            .mockEndpoint()
            .delete("/collections/580e63fc8c9a982ac9b8b745/items/live")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.collections.items.deleteItemsLive("580e63fc8c9a982ac9b8b745", {
            items: [
                {
                    id: "580e64008c9a982ac9b8b754",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("update-items-live", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            items: [
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    fieldData: { name: "Ne Paniquez Pas", slug: "ne-paniquez-pas" },
                },
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    fieldData: { name: "No Entrar en Pánico", slug: "no-entrar-en-panico" },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    fieldData: { name: "Au Revoir et Merci pour Tous les Poissons", slug: "au-revoir-et-merci" },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    fieldData: { name: "Hasta Luego y Gracias por Todo el Pescado", slug: "hasta-luego-y-gracias" },
                },
            ],
        };
        const rawResponseBody = {
            items: [
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Ne Paniquez Pas", slug: "ne-paniquez-pas" },
                },
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "No Entrar en Pánico", slug: "no-entrar-en-panico" },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Au Revoir et Merci pour Tous les Poissons", slug: "au-revoir-et-merci" },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: { name: "Hasta Luego y Gracias por Todo el Pescado", slug: "hasta-luego-y-gracias" },
                },
            ],
        };
        server
            .mockEndpoint()
            .patch("/collections/580e63fc8c9a982ac9b8b745/items/live")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.updateItemsLive("580e63fc8c9a982ac9b8b745", {
            items: [
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    fieldData: {
                        name: "Ne Paniquez Pas",
                        slug: "ne-paniquez-pas",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    fieldData: {
                        name: "No Entrar en P\u00E1nico",
                        slug: "no-entrar-en-panico",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    fieldData: {
                        name: "Au Revoir et Merci pour Tous les Poissons",
                        slug: "au-revoir-et-merci",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    fieldData: {
                        name: "Hasta Luego y Gracias por Todo el Pescado",
                        slug: "hasta-luego-y-gracias",
                    },
                },
            ],
        });
        expect(response).toEqual({
            items: [
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Ne Paniquez Pas",
                        slug: "ne-paniquez-pas",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5ea6",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "No Entrar en P\u00E1nico",
                        slug: "no-entrar-en-panico",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca5",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Au Revoir et Merci pour Tous les Poissons",
                        slug: "au-revoir-et-merci",
                    },
                },
                {
                    id: "66f6ed9576ddacf3149d5eaa",
                    cmsLocaleId: "66f6e966c9e1dc700a857ca4",
                    lastPublished: "2024-09-27T17:38:29.066Z",
                    lastUpdated: "2024-09-27T17:38:29.066Z",
                    createdOn: "2024-09-27T17:38:29.066Z",
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Hasta Luego y Gracias por Todo el Pescado",
                        slug: "hasta-luego-y-gracias",
                    },
                },
            ],
        });
    });

    test("create-items", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            cmsLocaleIds: ["66f6e966c9e1dc700a857ca3", "66f6e966c9e1dc700a857ca4", "66f6e966c9e1dc700a857ca5"],
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Don’t Panic", slug: "dont-panic" },
        };
        const rawResponseBody = {
            id: "580e64008c9a982ac9b8b754",
            cmsLocaleIds: ["653ad57de882f528b32e810e", "6514390aea353fc691d69827", "65143930ea353fc691d69cd8"],
            lastPublished: "2023-03-17T18:47:35.560Z",
            lastUpdated: "2023-03-17T18:47:35.560Z",
            createdOn: "2023-03-17T18:47:35.560Z",
            isArchived: true,
            isDraft: true,
            fieldData: { name: "My new item", slug: "my-new-item" },
        };
        server
            .mockEndpoint()
            .post("/collections/580e63fc8c9a982ac9b8b745/items/bulk")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.createItems("580e63fc8c9a982ac9b8b745", {
            cmsLocaleIds: ["66f6e966c9e1dc700a857ca3", "66f6e966c9e1dc700a857ca4", "66f6e966c9e1dc700a857ca5"],
            isArchived: false,
            isDraft: false,
            fieldData: {
                name: "Don\u2019t Panic",
                slug: "dont-panic",
            },
        });
        expect(response).toEqual({
            id: "580e64008c9a982ac9b8b754",
            cmsLocaleIds: ["653ad57de882f528b32e810e", "6514390aea353fc691d69827", "65143930ea353fc691d69cd8"],
            lastPublished: "2023-03-17T18:47:35.560Z",
            lastUpdated: "2023-03-17T18:47:35.560Z",
            createdOn: "2023-03-17T18:47:35.560Z",
            isArchived: true,
            isDraft: true,
            fieldData: {
                name: "My new item",
                slug: "my-new-item",
            },
        });
    });

    test("get-item", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        server
            .mockEndpoint()
            .get("/collections/580e63fc8c9a982ac9b8b745/items/580e64008c9a982ac9b8b754")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.getItem("580e63fc8c9a982ac9b8b745", "580e64008c9a982ac9b8b754");
        expect(response).toEqual({
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: {
                name: "Pan Galactic Gargle Blaster Recipe",
                slug: "pan-galactic-gargle-blaster",
            },
        });
    });

    test("delete-item", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        server
            .mockEndpoint()
            .delete("/collections/580e63fc8c9a982ac9b8b745/items/580e64008c9a982ac9b8b754")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.collections.items.deleteItem(
            "580e63fc8c9a982ac9b8b745",
            "580e64008c9a982ac9b8b754",
        );
        expect(response).toEqual(undefined);
    });

    test("update-item", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        const rawResponseBody = {
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        server
            .mockEndpoint()
            .patch("/collections/580e63fc8c9a982ac9b8b745/items/580e64008c9a982ac9b8b754")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.updateItem(
            "580e63fc8c9a982ac9b8b745",
            "580e64008c9a982ac9b8b754",
            {
                body: {
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Pan Galactic Gargle Blaster Recipe",
                        slug: "pan-galactic-gargle-blaster",
                    },
                },
            },
        );
        expect(response).toEqual({
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: {
                name: "Pan Galactic Gargle Blaster Recipe",
                slug: "pan-galactic-gargle-blaster",
            },
        });
    });

    test("get-item-live", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        server
            .mockEndpoint()
            .get("/collections/580e63fc8c9a982ac9b8b745/items/580e64008c9a982ac9b8b754/live")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.getItemLive(
            "580e63fc8c9a982ac9b8b745",
            "580e64008c9a982ac9b8b754",
        );
        expect(response).toEqual({
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: {
                name: "Pan Galactic Gargle Blaster Recipe",
                slug: "pan-galactic-gargle-blaster",
            },
        });
    });

    test("delete-item-live", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        server
            .mockEndpoint()
            .delete("/collections/580e63fc8c9a982ac9b8b745/items/580e64008c9a982ac9b8b754/live")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.collections.items.deleteItemLive(
            "580e63fc8c9a982ac9b8b745",
            "580e64008c9a982ac9b8b754",
        );
        expect(response).toEqual(undefined);
    });

    test("update-item-live", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        const rawResponseBody = {
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: { name: "Pan Galactic Gargle Blaster Recipe", slug: "pan-galactic-gargle-blaster" },
        };
        server
            .mockEndpoint()
            .patch("/collections/580e63fc8c9a982ac9b8b745/items/580e64008c9a982ac9b8b754/live")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.updateItemLive(
            "580e63fc8c9a982ac9b8b745",
            "580e64008c9a982ac9b8b754",
            {
                body: {
                    isArchived: false,
                    isDraft: false,
                    fieldData: {
                        name: "Pan Galactic Gargle Blaster Recipe",
                        slug: "pan-galactic-gargle-blaster",
                    },
                },
            },
        );
        expect(response).toEqual({
            id: "42b720ef280c7a7a3be8cabe",
            cmsLocaleId: "653ad57de882f528b32e810e",
            lastPublished: "2022-11-29T16:22:43.159Z",
            lastUpdated: "2022-11-17T17:19:43.282Z",
            createdOn: "2022-11-17T17:11:57.148Z",
            isArchived: false,
            isDraft: false,
            fieldData: {
                name: "Pan Galactic Gargle Blaster Recipe",
                slug: "pan-galactic-gargle-blaster",
            },
        });
    });

    test("publish-item", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            itemIds: ["643fd856d66b6528195ee2ca", "643fd856d66b6528195ee2cb", "643fd856d66b6528195ee2cc"],
        };
        const rawResponseBody = {
            publishedItemIds: ["643fd856d66b6528195ee2ca", "643fd856d66b6528195ee2cb"],
            errors: ["Staging item ID 643fd856d66b6528195ee2cf not found."],
        };
        server
            .mockEndpoint()
            .post("/collections/580e63fc8c9a982ac9b8b745/items/publish")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.items.publishItem("580e63fc8c9a982ac9b8b745", {
            itemIds: ["643fd856d66b6528195ee2ca", "643fd856d66b6528195ee2cb", "643fd856d66b6528195ee2cc"],
        });
        expect(response).toEqual({
            publishedItemIds: ["643fd856d66b6528195ee2ca", "643fd856d66b6528195ee2cb"],
            errors: ["Staging item ID 643fd856d66b6528195ee2cf not found."],
        });
    });
});
