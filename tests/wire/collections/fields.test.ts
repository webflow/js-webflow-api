/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { WebflowClient } from "../../../src/Client";

describe("Fields", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            id: "562ac0395358780a1f5e6fbc",
            isEditable: true,
            isRequired: false,
            type: "RichText",
            displayName: "Post Body",
            helpText: "Add the body of your post here",
        };
        const rawResponseBody = {
            id: "562ac0395358780a1f5e6fbc",
            isEditable: true,
            isRequired: false,
            type: "RichText",
            displayName: "Post Body",
            helpText: "Add the body of your post here",
        };
        server
            .mockEndpoint()
            .post("/collections/580e63fc8c9a982ac9b8b745/fields")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.fields.create("580e63fc8c9a982ac9b8b745", {
            id: "562ac0395358780a1f5e6fbc",
            isEditable: true,
            isRequired: false,
            type: "RichText",
            displayName: "Post Body",
            helpText: "Add the body of your post here",
        });
        expect(response).toEqual({
            id: "562ac0395358780a1f5e6fbc",
            isEditable: true,
            isRequired: false,
            type: "RichText",
            displayName: "Post Body",
            helpText: "Add the body of your post here",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        server
            .mockEndpoint()
            .delete("/collections/580e63fc8c9a982ac9b8b745/fields/580e63fc8c9a982ac9b8b745")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.collections.fields.delete("580e63fc8c9a982ac9b8b745", "580e63fc8c9a982ac9b8b745");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            isRequired: false,
            displayName: "Post Body",
            helpText: "Add the body of your post here",
        };
        const rawResponseBody = {
            id: "75821f618da60c18383330bcc0ca488b",
            isRequired: false,
            isEditable: true,
            type: "RichText",
            slug: "post-body",
            displayName: "Post Body",
            helpText: "Add the body of your post here",
        };
        server
            .mockEndpoint()
            .patch("/collections/580e63fc8c9a982ac9b8b745/fields/580e63fc8c9a982ac9b8b745")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.fields.update(
            "580e63fc8c9a982ac9b8b745",
            "580e63fc8c9a982ac9b8b745",
            {
                isRequired: false,
                displayName: "Post Body",
                helpText: "Add the body of your post here",
            },
        );
        expect(response).toEqual({
            id: "75821f618da60c18383330bcc0ca488b",
            isRequired: false,
            isEditable: true,
            type: "RichText",
            slug: "post-body",
            displayName: "Post Body",
            helpText: "Add the body of your post here",
        });
    });
});
