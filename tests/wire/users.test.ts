/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { WebflowClient } from "../../src/Client";

describe("Users", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            count: 5,
            limit: 5,
            offset: 0,
            total: 201,
            users: [
                {
                    id: "6287ec36a841b25637c663df",
                    isEmailVerified: false,
                    lastUpdated: "2022-05-20T13:46:12Z",
                    invitedOn: "2016-10-24T19:41:29Z",
                    createdOn: "2022-05-20T13:46:12Z",
                    lastLogin: "2016-10-24T19:41:29Z",
                    status: "unverified",
                    accessGroups: [{ slug: "vogon-construction-crew", type: "admin" }],
                },
                {
                    id: "6287ec36a841b25637c663f0",
                    isEmailVerified: false,
                    lastUpdated: "2022-05-19T05:32:04Z",
                    invitedOn: "2016-10-24T19:41:29Z",
                    createdOn: "2022-05-19T05:32:04Z",
                    lastLogin: "2016-10-24T19:41:29Z",
                    status: "unverified",
                    accessGroups: [{ slug: "improbability-drive-test-subjects", type: "admin" }],
                },
                {
                    id: "6287ec36a841b25637c663d9",
                    isEmailVerified: true,
                    lastUpdated: "2022-05-17T03:34:06Z",
                    invitedOn: "2016-10-24T19:41:29Z",
                    createdOn: "2022-05-17T03:34:06Z",
                    lastLogin: "2016-10-24T19:41:29Z",
                    status: "verified",
                    accessGroups: [{ slug: "heart-of-gold-crew", type: "admin" }],
                },
                {
                    id: "6287ec37a841b25637c6641b",
                    isEmailVerified: false,
                    lastUpdated: "2022-05-15T03:46:09Z",
                    invitedOn: "2016-10-24T19:41:29Z",
                    createdOn: "2022-05-15T03:46:09Z",
                    lastLogin: "2016-10-24T19:41:29Z",
                    status: "unverified",
                    accessGroups: [{ slug: "hitchhikers-guide-research-team", type: "admin" }],
                },
                {
                    id: "6287ec37a841b25637c66449",
                    isEmailVerified: true,
                    lastUpdated: "2022-05-15T02:55:38Z",
                    invitedOn: "2016-10-24T19:41:29Z",
                    createdOn: "2022-05-15T02:55:38Z",
                    lastLogin: "2016-10-24T19:41:29Z",
                    status: "verified",
                    accessGroups: [{ slug: "milliways-reservationists", type: "admin" }],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/users")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.list("580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            count: 5,
            limit: 5,
            offset: 0,
            total: 201,
            users: [
                {
                    id: "6287ec36a841b25637c663df",
                    isEmailVerified: false,
                    lastUpdated: new Date("2022-05-20T13:46:12.000Z"),
                    invitedOn: new Date("2016-10-24T19:41:29.000Z"),
                    createdOn: new Date("2022-05-20T13:46:12.000Z"),
                    lastLogin: new Date("2016-10-24T19:41:29.000Z"),
                    status: "unverified",
                    accessGroups: [
                        {
                            slug: "vogon-construction-crew",
                            type: "admin",
                        },
                    ],
                },
                {
                    id: "6287ec36a841b25637c663f0",
                    isEmailVerified: false,
                    lastUpdated: new Date("2022-05-19T05:32:04.000Z"),
                    invitedOn: new Date("2016-10-24T19:41:29.000Z"),
                    createdOn: new Date("2022-05-19T05:32:04.000Z"),
                    lastLogin: new Date("2016-10-24T19:41:29.000Z"),
                    status: "unverified",
                    accessGroups: [
                        {
                            slug: "improbability-drive-test-subjects",
                            type: "admin",
                        },
                    ],
                },
                {
                    id: "6287ec36a841b25637c663d9",
                    isEmailVerified: true,
                    lastUpdated: new Date("2022-05-17T03:34:06.000Z"),
                    invitedOn: new Date("2016-10-24T19:41:29.000Z"),
                    createdOn: new Date("2022-05-17T03:34:06.000Z"),
                    lastLogin: new Date("2016-10-24T19:41:29.000Z"),
                    status: "verified",
                    accessGroups: [
                        {
                            slug: "heart-of-gold-crew",
                            type: "admin",
                        },
                    ],
                },
                {
                    id: "6287ec37a841b25637c6641b",
                    isEmailVerified: false,
                    lastUpdated: new Date("2022-05-15T03:46:09.000Z"),
                    invitedOn: new Date("2016-10-24T19:41:29.000Z"),
                    createdOn: new Date("2022-05-15T03:46:09.000Z"),
                    lastLogin: new Date("2016-10-24T19:41:29.000Z"),
                    status: "unverified",
                    accessGroups: [
                        {
                            slug: "hitchhikers-guide-research-team",
                            type: "admin",
                        },
                    ],
                },
                {
                    id: "6287ec37a841b25637c66449",
                    isEmailVerified: true,
                    lastUpdated: new Date("2022-05-15T02:55:38.000Z"),
                    invitedOn: new Date("2016-10-24T19:41:29.000Z"),
                    createdOn: new Date("2022-05-15T02:55:38.000Z"),
                    lastLogin: new Date("2016-10-24T19:41:29.000Z"),
                    status: "verified",
                    accessGroups: [
                        {
                            slug: "milliways-reservationists",
                            type: "admin",
                        },
                    ],
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            id: "6287ec36a841b25637c663df",
            isEmailVerified: true,
            lastUpdated: "2022-05-20T13:46:12Z",
            invitedOn: "2022-05-20T13:46:12Z",
            createdOn: "2022-05-20T13:46:12Z",
            lastLogin: "2022-05-20T13:46:12Z",
            status: "verified",
            accessGroups: [{ slug: "webflowers", type: "admin" }],
            data: {
                data: {
                    name: "name",
                    email: "email",
                    "accept-privacy": true,
                    "accept-communications": true,
                    additionalProperties: "additionalProperties",
                },
            },
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/users/580e63e98c9a982ac9b8b741")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.get("580e63e98c9a982ac9b8b741", "580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            id: "6287ec36a841b25637c663df",
            isEmailVerified: true,
            lastUpdated: new Date("2022-05-20T13:46:12.000Z"),
            invitedOn: new Date("2022-05-20T13:46:12.000Z"),
            createdOn: new Date("2022-05-20T13:46:12.000Z"),
            lastLogin: new Date("2022-05-20T13:46:12.000Z"),
            status: "verified",
            accessGroups: [
                {
                    slug: "webflowers",
                    type: "admin",
                },
            ],
            data: {
                data: {
                    name: "name",
                    email: "email",
                    acceptPrivacy: true,
                    acceptCommunications: true,
                    additionalProperties: "additionalProperties",
                },
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        server
            .mockEndpoint()
            .delete("/sites/580e63e98c9a982ac9b8b741/users/580e63e98c9a982ac9b8b741")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.delete("580e63e98c9a982ac9b8b741", "580e63e98c9a982ac9b8b741");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            data: { name: "Some One", "accept-privacy": false, "accept-communications": false },
            accessGroups: ["webflowers", "platinum", "free-tier"],
        };
        const rawResponseBody = {
            id: "6287ec36a841b25637c663df",
            isEmailVerified: true,
            lastUpdated: "2022-05-20T13:46:12Z",
            invitedOn: "2022-05-20T13:46:12Z",
            createdOn: "2022-05-20T13:46:12Z",
            lastLogin: "2022-05-20T13:46:12Z",
            status: "verified",
            accessGroups: [{ slug: "webflowers", type: "admin" }],
            data: {
                data: {
                    name: "name",
                    email: "email",
                    "accept-privacy": true,
                    "accept-communications": true,
                    additionalProperties: "additionalProperties",
                },
            },
        };
        server
            .mockEndpoint()
            .patch("/sites/580e63e98c9a982ac9b8b741/users/580e63e98c9a982ac9b8b741")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.update("580e63e98c9a982ac9b8b741", "580e63e98c9a982ac9b8b741", {
            data: {
                name: "Some One",
                acceptPrivacy: false,
                acceptCommunications: false,
            },
            accessGroups: ["webflowers", "platinum", "free-tier"],
        });
        expect(response).toEqual({
            id: "6287ec36a841b25637c663df",
            isEmailVerified: true,
            lastUpdated: new Date("2022-05-20T13:46:12.000Z"),
            invitedOn: new Date("2022-05-20T13:46:12.000Z"),
            createdOn: new Date("2022-05-20T13:46:12.000Z"),
            lastLogin: new Date("2022-05-20T13:46:12.000Z"),
            status: "verified",
            accessGroups: [
                {
                    slug: "webflowers",
                    type: "admin",
                },
            ],
            data: {
                data: {
                    name: "name",
                    email: "email",
                    acceptPrivacy: true,
                    acceptCommunications: true,
                    additionalProperties: "additionalProperties",
                },
            },
        });
    });

    test("invite", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = { email: "some.one@home.com", accessGroups: ["webflowers"] };
        const rawResponseBody = {
            id: "6287ec36a841b25637c663df",
            isEmailVerified: true,
            lastUpdated: "2022-05-20T13:46:12Z",
            invitedOn: "2022-05-20T13:46:12Z",
            createdOn: "2022-05-20T13:46:12Z",
            lastLogin: "2022-05-20T13:46:12Z",
            status: "verified",
            accessGroups: [{ slug: "webflowers", type: "admin" }],
            data: {
                data: {
                    name: "name",
                    email: "email",
                    "accept-privacy": true,
                    "accept-communications": true,
                    additionalProperties: "additionalProperties",
                },
            },
        };
        server
            .mockEndpoint()
            .post("/sites/580e63e98c9a982ac9b8b741/users/invite")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.invite("580e63e98c9a982ac9b8b741", {
            email: "some.one@home.com",
            accessGroups: ["webflowers"],
        });
        expect(response).toEqual({
            id: "6287ec36a841b25637c663df",
            isEmailVerified: true,
            lastUpdated: new Date("2022-05-20T13:46:12.000Z"),
            invitedOn: new Date("2022-05-20T13:46:12.000Z"),
            createdOn: new Date("2022-05-20T13:46:12.000Z"),
            lastLogin: new Date("2022-05-20T13:46:12.000Z"),
            status: "verified",
            accessGroups: [
                {
                    slug: "webflowers",
                    type: "admin",
                },
            ],
            data: {
                data: {
                    name: "name",
                    email: "email",
                    acceptPrivacy: true,
                    acceptCommunications: true,
                    additionalProperties: "additionalProperties",
                },
            },
        });
    });
});
