/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { WebflowClient } from "../../src/Client";

describe("Inventory", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = { id: "5bfedb42bab0ad90fa7dad39", quantity: 100, inventoryType: "finite" };
        server
            .mockEndpoint()
            .get("/collections/6377a7c4b7a79608c34a46f7/items/5e8518516e147040726cc415/inventory")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.list("6377a7c4b7a79608c34a46f7", "5e8518516e147040726cc415");
        expect(response).toEqual({
            id: "5bfedb42bab0ad90fa7dad39",
            quantity: 100,
            inventoryType: "finite",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = { inventoryType: "infinite" };
        const rawResponseBody = { id: "5bfedb42bab0ad90fa7dad39", quantity: 100, inventoryType: "finite" };
        server
            .mockEndpoint()
            .patch("/collections/6377a7c4b7a79608c34a46f7/items/5e8518516e147040726cc415/inventory")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.inventory.update("6377a7c4b7a79608c34a46f7", "5e8518516e147040726cc415", {
            inventoryType: "infinite",
        });
        expect(response).toEqual({
            id: "5bfedb42bab0ad90fa7dad39",
            quantity: 100,
            inventoryType: "finite",
        });
    });
});
