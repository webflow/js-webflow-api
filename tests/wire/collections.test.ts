/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { WebflowClient } from "../../src/Client";

describe("Collections", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            collections: [
                {
                    id: "63692ab61fb2852f582ba8f5",
                    displayName: "Products",
                    singularName: "Product",
                    slug: "product",
                    createdOn: "2019-06-12T13:35:14Z",
                    lastUpdated: "2022-11-17T15:08:50Z",
                },
                {
                    id: "63692ab61fb2856e6a2ba8f6",
                    displayName: "Categories",
                    singularName: "Category",
                    slug: "category",
                    createdOn: "2019-06-12T13:35:14Z",
                    lastUpdated: "2022-11-17T15:08:50Z",
                },
                {
                    id: "63692ab61fb285a8562ba8f4",
                    displayName: "SKUs",
                    singularName: "SKU",
                    slug: "sku",
                    createdOn: "2019-06-12T13:35:14Z",
                    lastUpdated: "2022-11-17T15:08:50Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/collections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.list("580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            collections: [
                {
                    id: "63692ab61fb2852f582ba8f5",
                    displayName: "Products",
                    singularName: "Product",
                    slug: "product",
                    createdOn: new Date("2019-06-12T13:35:14.000Z"),
                    lastUpdated: new Date("2022-11-17T15:08:50.000Z"),
                },
                {
                    id: "63692ab61fb2856e6a2ba8f6",
                    displayName: "Categories",
                    singularName: "Category",
                    slug: "category",
                    createdOn: new Date("2019-06-12T13:35:14.000Z"),
                    lastUpdated: new Date("2022-11-17T15:08:50.000Z"),
                },
                {
                    id: "63692ab61fb285a8562ba8f4",
                    displayName: "SKUs",
                    singularName: "SKU",
                    slug: "sku",
                    createdOn: new Date("2019-06-12T13:35:14.000Z"),
                    lastUpdated: new Date("2022-11-17T15:08:50.000Z"),
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "posts",
            fields: [
                { isRequired: true, type: "PlainText", displayName: "Title", helpText: "The title of the blog post" },
                {
                    isRequired: true,
                    type: "RichText",
                    displayName: "Content",
                    helpText: "The content of the blog post",
                },
                {
                    isRequired: true,
                    type: "Reference",
                    displayName: "Author",
                    helpText: "The author of the blog post",
                    metadata: { collectionId: "23cc2d952d4e4631ffd4345d2743db4e" },
                },
            ],
        };
        const rawResponseBody = {
            id: "562ac0395358780a1f5e6fbd",
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "posts",
            createdOn: "2016-10-24T19:41:48Z",
            lastUpdated: "2016-10-24T19:42:38Z",
            fields: [
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "title",
                    displayName: "Title",
                    helpText: "The title of the blog post",
                },
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "RichText",
                    slug: "content",
                    displayName: "Content",
                    helpText: "The content of the blog post",
                },
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "Reference",
                    slug: "author",
                    displayName: "Author",
                    helpText: "The author of the blog post",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/sites/580e63e98c9a982ac9b8b741/collections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.create("580e63e98c9a982ac9b8b741", {
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "posts",
            fields: [
                {
                    isRequired: true,
                    type: "PlainText",
                    displayName: "Title",
                    helpText: "The title of the blog post",
                },
                {
                    isRequired: true,
                    type: "RichText",
                    displayName: "Content",
                    helpText: "The content of the blog post",
                },
                {
                    isRequired: true,
                    type: "Reference",
                    displayName: "Author",
                    helpText: "The author of the blog post",
                    metadata: {
                        collectionId: "23cc2d952d4e4631ffd4345d2743db4e",
                    },
                },
            ],
        });
        expect(response).toEqual({
            id: "562ac0395358780a1f5e6fbd",
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "posts",
            createdOn: new Date("2016-10-24T19:41:48.000Z"),
            lastUpdated: new Date("2016-10-24T19:42:38.000Z"),
            fields: [
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "title",
                    displayName: "Title",
                    helpText: "The title of the blog post",
                },
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "RichText",
                    slug: "content",
                    displayName: "Content",
                    helpText: "The content of the blog post",
                },
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "Reference",
                    slug: "author",
                    displayName: "Author",
                    helpText: "The author of the blog post",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            id: "580e63fc8c9a982ac9b8b745",
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "post",
            createdOn: "2016-10-24T19:41:48Z",
            lastUpdated: "2016-10-24T19:42:38Z",
            fields: [
                {
                    id: "23cc2d952d4e4631ffd4345d2743db4e",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "name",
                    displayName: "Name",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/collections/580e63fc8c9a982ac9b8b745")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.get("580e63fc8c9a982ac9b8b745");
        expect(response).toEqual({
            id: "580e63fc8c9a982ac9b8b745",
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "post",
            createdOn: new Date("2016-10-24T19:41:48.000Z"),
            lastUpdated: new Date("2016-10-24T19:42:38.000Z"),
            fields: [
                {
                    id: "23cc2d952d4e4631ffd4345d2743db4e",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "name",
                    displayName: "Name",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        server.mockEndpoint().delete("/collections/580e63fc8c9a982ac9b8b745").respondWith().statusCode(200).build();

        const response = await client.collections.delete("580e63fc8c9a982ac9b8b745");
        expect(response).toEqual(undefined);
    });
});
