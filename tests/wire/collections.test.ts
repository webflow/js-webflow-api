/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { WebflowClient } from "../../src/Client";

describe("Collections", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            collections: [
                {
                    id: "63692ab61fb2852f582ba8f5",
                    displayName: "Products",
                    singularName: "Product",
                    slug: "product",
                    createdOn: "2019-06-12T13:35:14Z",
                    lastUpdated: "2022-11-17T15:08:50Z",
                },
                {
                    id: "63692ab61fb2856e6a2ba8f6",
                    displayName: "Categories",
                    singularName: "Category",
                    slug: "category",
                    createdOn: "2019-06-12T13:35:14Z",
                    lastUpdated: "2022-11-17T15:08:50Z",
                },
                {
                    id: "63692ab61fb285a8562ba8f4",
                    displayName: "SKUs",
                    singularName: "SKU",
                    slug: "sku",
                    createdOn: "2019-06-12T13:35:14Z",
                    lastUpdated: "2022-11-17T15:08:50Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/collections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.list("580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            collections: [
                {
                    id: "63692ab61fb2852f582ba8f5",
                    displayName: "Products",
                    singularName: "Product",
                    slug: "product",
                    createdOn: new Date("2019-06-12T13:35:14.000Z"),
                    lastUpdated: new Date("2022-11-17T15:08:50.000Z"),
                },
                {
                    id: "63692ab61fb2856e6a2ba8f6",
                    displayName: "Categories",
                    singularName: "Category",
                    slug: "category",
                    createdOn: new Date("2019-06-12T13:35:14.000Z"),
                    lastUpdated: new Date("2022-11-17T15:08:50.000Z"),
                },
                {
                    id: "63692ab61fb285a8562ba8f4",
                    displayName: "SKUs",
                    singularName: "SKU",
                    slug: "sku",
                    createdOn: new Date("2019-06-12T13:35:14.000Z"),
                    lastUpdated: new Date("2022-11-17T15:08:50.000Z"),
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "posts",
            fields: [
                { isRequired: true, type: "PlainText", displayName: "Title", helpText: "The title of the blog post" },
                {
                    isRequired: true,
                    type: "RichText",
                    displayName: "Content",
                    helpText: "The content of the blog post",
                },
                {
                    isRequired: true,
                    type: "Reference",
                    displayName: "Author",
                    helpText: "The author of the blog post",
                    metadata: { collectionId: "23cc2d952d4e4631ffd4345d2743db4e" },
                },
            ],
        };
        const rawResponseBody = {
            id: "562ac0395358780a1f5e6fbd",
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "posts",
            createdOn: "2016-10-24T19:41:48Z",
            lastUpdated: "2016-10-24T19:42:38Z",
            fields: [
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "title",
                    displayName: "Title",
                    helpText: "The title of the blog post",
                },
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "RichText",
                    slug: "content",
                    displayName: "Content",
                    helpText: "The content of the blog post",
                },
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "Reference",
                    slug: "author",
                    displayName: "Author",
                    helpText: "The author of the blog post",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/sites/580e63e98c9a982ac9b8b741/collections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.create("580e63e98c9a982ac9b8b741", {
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "posts",
            fields: [
                {
                    isRequired: true,
                    type: "PlainText",
                    displayName: "Title",
                    helpText: "The title of the blog post",
                },
                {
                    isRequired: true,
                    type: "RichText",
                    displayName: "Content",
                    helpText: "The content of the blog post",
                },
                {
                    isRequired: true,
                    type: "Reference",
                    displayName: "Author",
                    helpText: "The author of the blog post",
                    metadata: {
                        collectionId: "23cc2d952d4e4631ffd4345d2743db4e",
                    },
                },
            ],
        });
        expect(response).toEqual({
            id: "562ac0395358780a1f5e6fbd",
            displayName: "Blog Posts",
            singularName: "Blog Post",
            slug: "posts",
            createdOn: new Date("2016-10-24T19:41:48.000Z"),
            lastUpdated: new Date("2016-10-24T19:42:38.000Z"),
            fields: [
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "title",
                    displayName: "Title",
                    helpText: "The title of the blog post",
                },
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "RichText",
                    slug: "content",
                    displayName: "Content",
                    helpText: "The content of the blog post",
                },
                {
                    id: "id",
                    isRequired: true,
                    isEditable: true,
                    type: "Reference",
                    slug: "author",
                    displayName: "Author",
                    helpText: "The author of the blog post",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            id: "7f15043107e2fc95644e93807ee25dd6",
            displayName: "Guide Entries",
            singularName: "Guide Entry",
            slug: "guide-entry",
            createdOn: "2024-04-12T12:42:00Z",
            lastUpdated: "2024-04-12T12:42:00Z",
            fields: [
                {
                    id: "5e2a1b3c4d5e6f7890a1b2c3",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "name",
                    displayName: "Entry Title",
                    helpText: "Name of the entry.",
                },
                {
                    id: "5e2a1b3c4d5e6f7890a1b2c4",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "slug",
                    displayName: "Slug",
                    helpText: "Slug of the entry.",
                },
                {
                    id: "6f7e8d9c0b1a2e3d4c5b6a7f",
                    isRequired: false,
                    isEditable: true,
                    type: "PlainText",
                    slug: "summary",
                    displayName: "Summary",
                    helpText: "A short summary of the entry.",
                },
                {
                    id: "1a2b3c4d5e6f7a8b9c0d1e2f",
                    isRequired: false,
                    isEditable: true,
                    type: "RichText",
                    slug: "entry-html",
                    displayName: "Entry HTML",
                    helpText: "The HTML content of the entry.",
                },
                {
                    id: "7e8d9c0b1a2e3d4c5b6a7f8e",
                    isRequired: false,
                    isEditable: true,
                    type: "Image",
                    slug: "illustration-image",
                    displayName: "Illustration Image",
                    helpText: "An image of the entry.",
                },
                {
                    id: "2f3e4d5c6b7a8e9d0c1b2a3f",
                    isRequired: false,
                    isEditable: true,
                    type: "VideoLink",
                    slug: "demonstration-video",
                    displayName: "Demonstration Video",
                    helpText: "A video of the entry.",
                },
                {
                    id: "8e9d0c1b2a3f4e5d6c7b8a9e",
                    isRequired: false,
                    isEditable: true,
                    type: "Link",
                    slug: "more-info-link",
                    displayName: "More Info Link",
                    helpText: "A link to more information about the entry.",
                },
                {
                    id: "3f4e5d6c7b8a9e0d1c2b3a4f",
                    isRequired: false,
                    isEditable: true,
                    type: "Number",
                    slug: "importance-level",
                    displayName: "Importance Level",
                    helpText: "The importance level of the entry.",
                },
                {
                    id: "9e0d1c2b3a4f5e6d7c8b9a0e",
                    isRequired: false,
                    isEditable: true,
                    type: "Switch",
                    slug: "is-essential",
                    displayName: "Is Essential",
                    helpText: "Is this entry essential?",
                },
                {
                    id: "4f5e6d7c8b9a0e1d2c3b4a5f",
                    isRequired: false,
                    isEditable: true,
                    type: "Color",
                    slug: "first-mentioned",
                    displayName: "First Mentioned",
                    helpText: "Date of the first mention of the subject.",
                },
                {
                    id: "0e1d2c3b4a5f6e7d8c9b0a1e",
                    isRequired: false,
                    isEditable: true,
                    type: "Color",
                    slug: "towel-color",
                    displayName: "Towel Color",
                    helpText: "The color of the towel.",
                },
                {
                    id: "5f6e7d8c9b0a1e2d3c4b5a6f",
                    isRequired: false,
                    isEditable: true,
                    type: "Reference",
                    slug: "related-entry",
                    displayName: "Related Entry",
                    helpText: "A related entry.",
                },
                {
                    id: "1e2d3c4b5a6f7e8d9c0b1a2f",
                    isRequired: false,
                    isEditable: true,
                    type: "MultiReference",
                    slug: "mentioned-in-entries",
                    displayName: "Mentioned In Entries",
                    helpText: "Entries that mention this subject.",
                },
                {
                    id: "6f7e8d9c0b1a2e3d4c5b6a8f",
                    isRequired: false,
                    isEditable: true,
                    type: "Option",
                    slug: "item-type",
                    displayName: "Item Type",
                    helpText: "The type of item.",
                },
                {
                    id: "2e3d4c5b6a7f8e9d0c1b2a4f",
                    isRequired: false,
                    isEditable: true,
                    type: "File",
                    slug: "guide-file",
                    displayName: "Guide File",
                },
                {
                    id: "7f8e9d0c1b2a3f4e5d6c8b9e",
                    isRequired: false,
                    isEditable: true,
                    type: "Email",
                    slug: "contributor-email",
                    displayName: "Contributor Email",
                },
                {
                    id: "3a4f5e6d7c8b9a0e1d2c4b5f",
                    isRequired: false,
                    isEditable: true,
                    type: "Phone",
                    slug: "emergency-contact",
                    displayName: "Emergency Contact",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/collections/580e63fc8c9a982ac9b8b745")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.collections.get("580e63fc8c9a982ac9b8b745");
        expect(response).toEqual({
            id: "7f15043107e2fc95644e93807ee25dd6",
            displayName: "Guide Entries",
            singularName: "Guide Entry",
            slug: "guide-entry",
            createdOn: new Date("2024-04-12T12:42:00.000Z"),
            lastUpdated: new Date("2024-04-12T12:42:00.000Z"),
            fields: [
                {
                    id: "5e2a1b3c4d5e6f7890a1b2c3",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "name",
                    displayName: "Entry Title",
                    helpText: "Name of the entry.",
                },
                {
                    id: "5e2a1b3c4d5e6f7890a1b2c4",
                    isRequired: true,
                    isEditable: true,
                    type: "PlainText",
                    slug: "slug",
                    displayName: "Slug",
                    helpText: "Slug of the entry.",
                },
                {
                    id: "6f7e8d9c0b1a2e3d4c5b6a7f",
                    isRequired: false,
                    isEditable: true,
                    type: "PlainText",
                    slug: "summary",
                    displayName: "Summary",
                    helpText: "A short summary of the entry.",
                },
                {
                    id: "1a2b3c4d5e6f7a8b9c0d1e2f",
                    isRequired: false,
                    isEditable: true,
                    type: "RichText",
                    slug: "entry-html",
                    displayName: "Entry HTML",
                    helpText: "The HTML content of the entry.",
                },
                {
                    id: "7e8d9c0b1a2e3d4c5b6a7f8e",
                    isRequired: false,
                    isEditable: true,
                    type: "Image",
                    slug: "illustration-image",
                    displayName: "Illustration Image",
                    helpText: "An image of the entry.",
                },
                {
                    id: "2f3e4d5c6b7a8e9d0c1b2a3f",
                    isRequired: false,
                    isEditable: true,
                    type: "VideoLink",
                    slug: "demonstration-video",
                    displayName: "Demonstration Video",
                    helpText: "A video of the entry.",
                },
                {
                    id: "8e9d0c1b2a3f4e5d6c7b8a9e",
                    isRequired: false,
                    isEditable: true,
                    type: "Link",
                    slug: "more-info-link",
                    displayName: "More Info Link",
                    helpText: "A link to more information about the entry.",
                },
                {
                    id: "3f4e5d6c7b8a9e0d1c2b3a4f",
                    isRequired: false,
                    isEditable: true,
                    type: "Number",
                    slug: "importance-level",
                    displayName: "Importance Level",
                    helpText: "The importance level of the entry.",
                },
                {
                    id: "9e0d1c2b3a4f5e6d7c8b9a0e",
                    isRequired: false,
                    isEditable: true,
                    type: "Switch",
                    slug: "is-essential",
                    displayName: "Is Essential",
                    helpText: "Is this entry essential?",
                },
                {
                    id: "4f5e6d7c8b9a0e1d2c3b4a5f",
                    isRequired: false,
                    isEditable: true,
                    type: "Color",
                    slug: "first-mentioned",
                    displayName: "First Mentioned",
                    helpText: "Date of the first mention of the subject.",
                },
                {
                    id: "0e1d2c3b4a5f6e7d8c9b0a1e",
                    isRequired: false,
                    isEditable: true,
                    type: "Color",
                    slug: "towel-color",
                    displayName: "Towel Color",
                    helpText: "The color of the towel.",
                },
                {
                    id: "5f6e7d8c9b0a1e2d3c4b5a6f",
                    isRequired: false,
                    isEditable: true,
                    type: "Reference",
                    slug: "related-entry",
                    displayName: "Related Entry",
                    helpText: "A related entry.",
                },
                {
                    id: "1e2d3c4b5a6f7e8d9c0b1a2f",
                    isRequired: false,
                    isEditable: true,
                    type: "MultiReference",
                    slug: "mentioned-in-entries",
                    displayName: "Mentioned In Entries",
                    helpText: "Entries that mention this subject.",
                },
                {
                    id: "6f7e8d9c0b1a2e3d4c5b6a8f",
                    isRequired: false,
                    isEditable: true,
                    type: "Option",
                    slug: "item-type",
                    displayName: "Item Type",
                    helpText: "The type of item.",
                },
                {
                    id: "2e3d4c5b6a7f8e9d0c1b2a4f",
                    isRequired: false,
                    isEditable: true,
                    type: "File",
                    slug: "guide-file",
                    displayName: "Guide File",
                },
                {
                    id: "7f8e9d0c1b2a3f4e5d6c8b9e",
                    isRequired: false,
                    isEditable: true,
                    type: "Email",
                    slug: "contributor-email",
                    displayName: "Contributor Email",
                },
                {
                    id: "3a4f5e6d7c8b9a0e1d2c4b5f",
                    isRequired: false,
                    isEditable: true,
                    type: "Phone",
                    slug: "emergency-contact",
                    displayName: "Emergency Contact",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        server.mockEndpoint().delete("/collections/580e63fc8c9a982ac9b8b745").respondWith().statusCode(200).build();

        const response = await client.collections.delete("580e63fc8c9a982ac9b8b745");
        expect(response).toEqual(undefined);
    });
});
