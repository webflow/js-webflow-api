/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { WebflowClient } from "../../../src/Client";

describe("Redirects", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            redirects: [
                { id: "42e1a2b7aa1a13f768a0042a", fromUrl: "/mostly-harmless", toUrl: "/earth" },
                { id: "6x9e7f8d9a4b1c2d3e4f5678", fromUrl: "/babel-fish", toUrl: "/translate" },
            ],
            pagination: { limit: 100, offset: 0, total: 2 },
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/redirects")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.redirects.list("580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            redirects: [
                {
                    id: "42e1a2b7aa1a13f768a0042a",
                    fromUrl: "/mostly-harmless",
                    toUrl: "/earth",
                },
                {
                    id: "6x9e7f8d9a4b1c2d3e4f5678",
                    fromUrl: "/babel-fish",
                    toUrl: "/translate",
                },
            ],
            pagination: {
                limit: 100,
                offset: 0,
                total: 2,
            },
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = { id: "42e1a2b7aa1a13f768a0042a", fromUrl: "/mostly-harmless", toUrl: "/earth" };
        const rawResponseBody = { id: "42e1a2b7aa1a13f768a0042a", fromUrl: "/mostly-harmless", toUrl: "/earth" };
        server
            .mockEndpoint()
            .post("/sites/580e63e98c9a982ac9b8b741/redirects")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.redirects.create("580e63e98c9a982ac9b8b741", {
            id: "42e1a2b7aa1a13f768a0042a",
            fromUrl: "/mostly-harmless",
            toUrl: "/earth",
        });
        expect(response).toEqual({
            id: "42e1a2b7aa1a13f768a0042a",
            fromUrl: "/mostly-harmless",
            toUrl: "/earth",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            redirects: [
                { id: "42e1a2b7aa1a13f768a0042a", fromUrl: "/mostly-harmless", toUrl: "/earth" },
                { id: "6x9e7f8d9a4b1c2d3e4f5678", fromUrl: "/babel-fish", toUrl: "/translate" },
            ],
            pagination: { limit: 100, offset: 0, total: 2 },
        };
        server
            .mockEndpoint()
            .delete("/sites/580e63e98c9a982ac9b8b741/redirects/66c4cb9a20cac35ed19500e6")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.redirects.delete("580e63e98c9a982ac9b8b741", "66c4cb9a20cac35ed19500e6");
        expect(response).toEqual({
            redirects: [
                {
                    id: "42e1a2b7aa1a13f768a0042a",
                    fromUrl: "/mostly-harmless",
                    toUrl: "/earth",
                },
                {
                    id: "6x9e7f8d9a4b1c2d3e4f5678",
                    fromUrl: "/babel-fish",
                    toUrl: "/translate",
                },
            ],
            pagination: {
                limit: 100,
                offset: 0,
                total: 2,
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = { id: "42e1a2b7aa1a13f768a0042a", fromUrl: "/mostly-harmless", toUrl: "/earth" };
        const rawResponseBody = { id: "42e1a2b7aa1a13f768a0042a", fromUrl: "/mostly-harmless", toUrl: "/earth" };
        server
            .mockEndpoint()
            .patch("/sites/580e63e98c9a982ac9b8b741/redirects/66c4cb9a20cac35ed19500e6")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.redirects.update("580e63e98c9a982ac9b8b741", "66c4cb9a20cac35ed19500e6", {
            id: "42e1a2b7aa1a13f768a0042a",
            fromUrl: "/mostly-harmless",
            toUrl: "/earth",
        });
        expect(response).toEqual({
            id: "42e1a2b7aa1a13f768a0042a",
            fromUrl: "/mostly-harmless",
            toUrl: "/earth",
        });
    });
});
