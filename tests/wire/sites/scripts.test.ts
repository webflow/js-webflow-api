/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { WebflowClient } from "../../../src/Client";

describe("Scripts", () => {
    test("get-custom-code", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: { "my-attribute": "some-value" },
                },
                { id: "alert", location: "header", version: "0.0.1", attributes: { key: "value" } },
            ],
            lastUpdated: "2022-10-26T00:28:54.191Z",
            createdOn: "2022-10-26T00:28:54.191Z",
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/custom_code")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.scripts.getCustomCode("580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: {
                        "my-attribute": "some-value",
                    },
                },
                {
                    id: "alert",
                    location: "header",
                    version: "0.0.1",
                    attributes: {
                        key: "value",
                    },
                },
            ],
            lastUpdated: "2022-10-26T00:28:54.191Z",
            createdOn: "2022-10-26T00:28:54.191Z",
        });
    });

    test("upsert-custom-code", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: { "my-attribute": "some-value" },
                },
                { id: "alert", location: "header", version: "0.0.1" },
            ],
        };
        const rawResponseBody = {
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: { "my-attribute": "some-value" },
                },
                { id: "alert", location: "header", version: "0.0.1", attributes: { key: "value" } },
            ],
            lastUpdated: "lastUpdated",
            createdOn: "createdOn",
        };
        server
            .mockEndpoint()
            .put("/sites/580e63e98c9a982ac9b8b741/custom_code")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.scripts.upsertCustomCode("580e63e98c9a982ac9b8b741", {
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: {
                        "my-attribute": "some-value",
                    },
                },
                {
                    id: "alert",
                    location: "header",
                    version: "0.0.1",
                },
            ],
        });
        expect(response).toEqual({
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: {
                        "my-attribute": "some-value",
                    },
                },
                {
                    id: "alert",
                    location: "header",
                    version: "0.0.1",
                    attributes: {
                        key: "value",
                    },
                },
            ],
            lastUpdated: "lastUpdated",
            createdOn: "createdOn",
        });
    });

    test("delete-custom-code", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        server
            .mockEndpoint()
            .delete("/sites/580e63e98c9a982ac9b8b741/custom_code")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.sites.scripts.deleteCustomCode("580e63e98c9a982ac9b8b741");
        expect(response).toEqual(undefined);
    });

    test("list-custom-code-blocks", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            blocks: [
                {
                    siteId: "6258612d1ee792848f805dcf",
                    type: "site",
                    scripts: [{ id: "chartjs", location: "header", version: "4.4.2", attributes: { key: "value" } }],
                    createdOn: "2024-04-03T16:49:15Z",
                    lastUpdated: "2024-04-03T16:49:15Z",
                },
                {
                    siteId: "6390c49674a71f84b51a08d8",
                    pageId: "6419db964a9c43f6a3af6348",
                    type: "page",
                    scripts: [{ id: "id", location: "header", version: "version" }],
                    createdOn: "2022-10-26T00:28:54Z",
                    lastUpdated: "2022-10-26T00:28:54Z",
                },
            ],
            pagination: { limit: 10, offset: 0, total: 1 },
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/custom_code/blocks")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.scripts.listCustomCodeBlocks("580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            blocks: [
                {
                    siteId: "6258612d1ee792848f805dcf",
                    type: "site",
                    scripts: [
                        {
                            id: "chartjs",
                            location: "header",
                            version: "4.4.2",
                            attributes: {
                                key: "value",
                            },
                        },
                    ],
                    createdOn: new Date("2024-04-03T16:49:15.000Z"),
                    lastUpdated: new Date("2024-04-03T16:49:15.000Z"),
                },
                {
                    siteId: "6390c49674a71f84b51a08d8",
                    pageId: "6419db964a9c43f6a3af6348",
                    type: "page",
                    scripts: [
                        {
                            id: "id",
                            location: "header",
                            version: "version",
                        },
                    ],
                    createdOn: new Date("2022-10-26T00:28:54.000Z"),
                    lastUpdated: new Date("2022-10-26T00:28:54.000Z"),
                },
            ],
            pagination: {
                limit: 10,
                offset: 0,
                total: 1,
            },
        });
    });
});
