/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { WebflowClient } from "../../../src/Client";

describe("RobotsTxt", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/robots_txt")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.robotsTxt.get("580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        });
    });

    test("put", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        };
        const rawResponseBody = {
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        };
        server
            .mockEndpoint()
            .put("/sites/580e63e98c9a982ac9b8b741/robots_txt")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.robotsTxt.put("580e63e98c9a982ac9b8b741", {
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        });
        expect(response).toEqual({
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = { rules: [{ userAgent: "*", allows: ["/public"], disallows: ["/bubbles"] }] };
        const rawResponseBody = {
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        };
        server
            .mockEndpoint()
            .delete("/sites/580e63e98c9a982ac9b8b741/robots_txt")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.robotsTxt.delete("580e63e98c9a982ac9b8b741", {
            rules: [
                {
                    userAgent: "*",
                    allows: ["/public"],
                    disallows: ["/bubbles"],
                },
            ],
        });
        expect(response).toEqual({
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        });
    });

    test("patch", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        };
        const rawResponseBody = {
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        };
        server
            .mockEndpoint()
            .patch("/sites/580e63e98c9a982ac9b8b741/robots_txt")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sites.robotsTxt.patch("580e63e98c9a982ac9b8b741", {
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        });
        expect(response).toEqual({
            rules: [
                {
                    userAgent: "googlebot",
                    allows: ["/public"],
                    disallows: ["/vogon-poetry", "/total-perspective-vortex"],
                },
            ],
            sitemap: "https://heartofgold.ship/sitemap.xml",
        });
    });
});
