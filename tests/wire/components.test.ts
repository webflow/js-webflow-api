/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { WebflowClient } from "../../src/Client";

describe("Components", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            components: [
                {
                    id: "6596da6045e56dee495bcbba",
                    name: "Primary Button",
                    group: "Buttons",
                    description: "A default button component that can be used across the site",
                    readonly: true,
                },
                {
                    id: "658205daa3e8206a523b5ad4",
                    name: "Secondary Button",
                    group: "Buttons",
                    description: "A secondary button component that can be used across the site",
                    readonly: true,
                },
                { id: "6258612d1ee792848f805dcf", name: "Card", readonly: true },
                { id: "68a2b1d1ee792848f805dcf", name: "Nav", readonly: true },
            ],
            pagination: { limit: 20, offset: 0, total: 4 },
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/components")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.list("580e63e98c9a982ac9b8b741", {
            branchId: "68026fa68ef6dc744c75b833",
        });
        expect(response).toEqual({
            components: [
                {
                    id: "6596da6045e56dee495bcbba",
                    name: "Primary Button",
                    group: "Buttons",
                    description: "A default button component that can be used across the site",
                    readonly: true,
                },
                {
                    id: "658205daa3e8206a523b5ad4",
                    name: "Secondary Button",
                    group: "Buttons",
                    description: "A secondary button component that can be used across the site",
                    readonly: true,
                },
                {
                    id: "6258612d1ee792848f805dcf",
                    name: "Card",
                    readonly: true,
                },
                {
                    id: "68a2b1d1ee792848f805dcf",
                    name: "Nav",
                    readonly: true,
                },
            ],
            pagination: {
                limit: 20,
                offset: 0,
                total: 4,
            },
        });
    });

    test("get-content", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            componentId: "69118560-d0bc-15fc-bbf8-b8fe5f6535b5",
            nodes: [
                { id: "id", text: {}, attributes: { key: "value" }, type: "text" },
                { id: "id", text: {}, attributes: { key: "value" }, type: "text" },
                { id: "id", image: {}, attributes: { key: "value" }, type: "image" },
                { id: "id", placeholder: "placeholder", attributes: { key: "value" }, type: "text-input" },
                { id: "id", choices: [{ value: "value", text: "text" }], attributes: { key: "value" }, type: "select" },
                {
                    id: "id",
                    value: "value",
                    waitingText: "waitingText",
                    attributes: { key: "value" },
                    type: "submit-button",
                },
                {
                    id: "id",
                    componentId: "componentId",
                    propertyOverrides: [{ propertyId: "7dd14c08-2e96-8d3d-2b19-b5c03642a0f0" }],
                    type: "component-instance",
                },
            ],
            pagination: { limit: 7, offset: 0, total: 7 },
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/components/8505ba55-ef72-629e-f85c-33e4b703d48b/dom")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.getContent(
            "580e63e98c9a982ac9b8b741",
            "8505ba55-ef72-629e-f85c-33e4b703d48b",
            {
                localeId: "65427cf400e02b306eaa04a0",
                branchId: "68026fa68ef6dc744c75b833",
            },
        );
        expect(response).toEqual({
            componentId: "69118560-d0bc-15fc-bbf8-b8fe5f6535b5",
            nodes: [
                {
                    type: "text",
                    id: "id",
                    text: {},
                    attributes: {
                        key: "value",
                    },
                },
                {
                    type: "text",
                    id: "id",
                    text: {},
                    attributes: {
                        key: "value",
                    },
                },
                {
                    type: "image",
                    id: "id",
                    image: {},
                    attributes: {
                        key: "value",
                    },
                },
                {
                    type: "text-input",
                    id: "id",
                    placeholder: "placeholder",
                    attributes: {
                        key: "value",
                    },
                },
                {
                    type: "select",
                    id: "id",
                    choices: [
                        {
                            value: "value",
                            text: "text",
                        },
                    ],
                    attributes: {
                        key: "value",
                    },
                },
                {
                    type: "submit-button",
                    id: "id",
                    value: "value",
                    waitingText: "waitingText",
                    attributes: {
                        key: "value",
                    },
                },
                {
                    type: "component-instance",
                    id: "id",
                    componentId: "componentId",
                    propertyOverrides: [
                        {
                            propertyId: "7dd14c08-2e96-8d3d-2b19-b5c03642a0f0",
                        },
                    ],
                },
            ],
            pagination: {
                limit: 7,
                offset: 0,
                total: 7,
            },
        });
    });

    test("update-content", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            nodes: [
                {
                    nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad623",
                    text: "<h1>The Hitchhiker's Guide to the Galaxy</h1>",
                },
                {
                    nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad627",
                    text: "<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>",
                },
                {
                    nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad635",
                    choices: [
                        { value: "choice-1", text: "First choice" },
                        { value: "choice-2", text: "Second choice" },
                    ],
                },
                { nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad642", placeholder: "Enter something here..." },
                { nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad671", value: "Submit", waitingText: "Submitting..." },
                {
                    nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad629",
                    propertyOverrides: [
                        {
                            propertyId: "7dd14c08-2e96-8d3d-2b19-b5c03642a0f0",
                            text: "<div><h1>Time is an <em>illusion</em></h1></div>",
                        },
                        {
                            propertyId: "7dd14c08-2e96-8d3d-2b19-b5c03642a0f1",
                            text: "Life, the Universe and Everything",
                        },
                    ],
                },
            ],
        };
        const rawResponseBody = { errors: ["errors"] };
        server
            .mockEndpoint()
            .post("/sites/580e63e98c9a982ac9b8b741/components/8505ba55-ef72-629e-f85c-33e4b703d48b/dom")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.updateContent(
            "580e63e98c9a982ac9b8b741",
            "8505ba55-ef72-629e-f85c-33e4b703d48b",
            {
                localeId: "65427cf400e02b306eaa04a0",
                branchId: "68026fa68ef6dc744c75b833",
                nodes: [
                    {
                        nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad623",
                        text: "<h1>The Hitchhiker's Guide to the Galaxy</h1>",
                    },
                    {
                        nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad627",
                        text: "<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>",
                    },
                    {
                        nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad635",
                        choices: [
                            {
                                value: "choice-1",
                                text: "First choice",
                            },
                            {
                                value: "choice-2",
                                text: "Second choice",
                            },
                        ],
                    },
                    {
                        nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad642",
                        placeholder: "Enter something here...",
                    },
                    {
                        nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad671",
                        value: "Submit",
                        waitingText: "Submitting...",
                    },
                    {
                        nodeId: "a245c12d-995b-55ee-5ec7-aa36a6cad629",
                        propertyOverrides: [
                            {
                                propertyId: "7dd14c08-2e96-8d3d-2b19-b5c03642a0f0",
                                text: "<div><h1>Time is an <em>illusion</em></h1></div>",
                            },
                            {
                                propertyId: "7dd14c08-2e96-8d3d-2b19-b5c03642a0f1",
                                text: "Life, the Universe and Everything",
                            },
                        ],
                    },
                ],
            },
        );
        expect(response).toEqual({
            errors: ["errors"],
        });
    });

    test("get-properties", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            componentId: "658205daa3e8206a523b5ad4",
            properties: [
                {
                    propertyId: "a245c12d-995b-55ee-5ec7-aa36a6cad623",
                    type: "Plain Text",
                    label: "Title",
                    text: { text: "The Hitchhiker's Guide to the Galaxy" },
                },
                {
                    propertyId: "a245c12d-995b-55ee-5ec7-aa36a6cad627",
                    type: "Rich Text",
                    label: "Content",
                    text: { html: "<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>" },
                },
            ],
            pagination: { limit: 2, offset: 0, total: 2 },
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/components/8505ba55-ef72-629e-f85c-33e4b703d48b/properties")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.getProperties(
            "580e63e98c9a982ac9b8b741",
            "8505ba55-ef72-629e-f85c-33e4b703d48b",
            {
                localeId: "65427cf400e02b306eaa04a0",
                branchId: "68026fa68ef6dc744c75b833",
            },
        );
        expect(response).toEqual({
            componentId: "658205daa3e8206a523b5ad4",
            properties: [
                {
                    propertyId: "a245c12d-995b-55ee-5ec7-aa36a6cad623",
                    type: "Plain Text",
                    label: "Title",
                    text: {
                        text: "The Hitchhiker's Guide to the Galaxy",
                    },
                },
                {
                    propertyId: "a245c12d-995b-55ee-5ec7-aa36a6cad627",
                    type: "Rich Text",
                    label: "Content",
                    text: {
                        html: "<div><h3>Don't Panic!</h3><p>Always know where your towel is.</p></div>",
                    },
                },
            ],
            pagination: {
                limit: 2,
                offset: 0,
                total: 2,
            },
        });
    });

    test("update-properties", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            properties: [
                { propertyId: "a245c12d-995b-55ee-5ec7-aa36a6cad623", text: "The Hitchhiker’s Guide to the Galaxy" },
                {
                    propertyId: "a245c12d-995b-55ee-5ec7-aa36a6cad627",
                    text: "<div><h3>Dont Panic!</h3><p>Always know where your towel is.</p></div>",
                },
            ],
        };
        const rawResponseBody = { errors: ["errors"] };
        server
            .mockEndpoint()
            .post("/sites/580e63e98c9a982ac9b8b741/components/8505ba55-ef72-629e-f85c-33e4b703d48b/properties")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.components.updateProperties(
            "580e63e98c9a982ac9b8b741",
            "8505ba55-ef72-629e-f85c-33e4b703d48b",
            {
                localeId: "65427cf400e02b306eaa04a0",
                branchId: "68026fa68ef6dc744c75b833",
                properties: [
                    {
                        propertyId: "a245c12d-995b-55ee-5ec7-aa36a6cad623",
                        text: "The Hitchhiker\u2019s Guide to the Galaxy",
                    },
                    {
                        propertyId: "a245c12d-995b-55ee-5ec7-aa36a6cad627",
                        text: "<div><h3>Dont Panic!</h3><p>Always know where your towel is.</p></div>",
                    },
                ],
            },
        );
        expect(response).toEqual({
            errors: ["errors"],
        });
    });
});
