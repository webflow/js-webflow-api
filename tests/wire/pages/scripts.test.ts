/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { WebflowClient } from "../../../src/Client";

describe("Scripts", () => {
    test("get-custom-code", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            scripts: [{ id: "id", location: "header", version: "version", attributes: { key: "value" } }],
            lastUpdated: "lastUpdated",
            createdOn: "createdOn",
        };
        server
            .mockEndpoint()
            .get("/pages/63c720f9347c2139b248e552/custom_code")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pages.scripts.getCustomCode("63c720f9347c2139b248e552");
        expect(response).toEqual({
            scripts: [
                {
                    id: "id",
                    location: "header",
                    version: "version",
                    attributes: {
                        key: "value",
                    },
                },
            ],
            lastUpdated: "lastUpdated",
            createdOn: "createdOn",
        });
    });

    test("upsert-custom-code", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: { "my-attribute": "some-value" },
                },
                { id: "alert", location: "header", version: "0.0.1" },
            ],
        };
        const rawResponseBody = {
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: { "my-attribute": "some-value" },
                },
                { id: "alert", location: "header", version: "0.0.1", attributes: { key: "value" } },
            ],
            lastUpdated: "2022-10-26T00:28:54.191Z",
            createdOn: "2022-10-26T00:28:54.191Z",
        };
        server
            .mockEndpoint()
            .put("/pages/63c720f9347c2139b248e552/custom_code")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.pages.scripts.upsertCustomCode("63c720f9347c2139b248e552", {
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: {
                        "my-attribute": "some-value",
                    },
                },
                {
                    id: "alert",
                    location: "header",
                    version: "0.0.1",
                },
            ],
        });
        expect(response).toEqual({
            scripts: [
                {
                    id: "cms_slider",
                    location: "header",
                    version: "1.0.0",
                    attributes: {
                        "my-attribute": "some-value",
                    },
                },
                {
                    id: "alert",
                    location: "header",
                    version: "0.0.1",
                    attributes: {
                        key: "value",
                    },
                },
            ],
            lastUpdated: "2022-10-26T00:28:54.191Z",
            createdOn: "2022-10-26T00:28:54.191Z",
        });
    });

    test("delete-custom-code", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        server
            .mockEndpoint()
            .delete("/pages/63c720f9347c2139b248e552/custom_code")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.pages.scripts.deleteCustomCode("63c720f9347c2139b248e552");
        expect(response).toEqual(undefined);
    });
});
