/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { WebflowClient } from "../../../src/Client";

describe("AuditLogs", () => {
    test("get-workspace-audit_logs", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            items: [
                {
                    eventSubType: "login",
                    eventType: "user_access",
                    timestamp: "2025-04-29T20:30:06Z",
                    actor: { id: "6661ccb359b561c69f29d554", email: "someone@email.com" },
                    workspace: { id: "6621ccb459b561c69f29d57c", slug: "hitchhikers-workspace" },
                },
                {
                    eventSubType: "user_added",
                    eventType: "workspace_membership",
                    timestamp: "2025-04-30T20:30:06Z",
                    actor: { id: "60492e55bbddce079561cd7a", email: "someone@webflow.com" },
                    workspace: { id: "6621ccb459b561c69f29d57c", slug: "hitchhikers-workspace" },
                },
                {
                    eventSubType: "user_added",
                    eventType: "site_membership",
                    timestamp: "2025-04-30T00:33:31Z",
                    actor: { id: "671fe00d185fc8c1ad409d37", email: "someone@webflow.com" },
                    workspace: { id: "6621ccb459b561c69f29d57c", slug: "hitchhikers-workspace" },
                },
            ],
            pagination: { limit: 10, offset: 0, total: 3 },
        };
        server
            .mockEndpoint()
            .get("/workspaces/hitchhikers-workspace/audit_logs")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspaces.auditLogs.getWorkspaceAuditLogs("hitchhikers-workspace", {
            from: new Date("2024-04-22T16:00:31.000Z"),
            to: new Date("2024-04-22T16:00:31.000Z"),
        });
        expect(response).toEqual({
            items: [
                {
                    eventType: "user_access",
                    eventSubType: "login",
                },
                {
                    eventType: "workspace_membership",
                    eventSubType: "user_added",
                },
                {
                    eventType: "site_membership",
                    eventSubType: "user_added",
                },
            ],
            pagination: {
                limit: 10,
                offset: 0,
                total: 3,
            },
        });
    });
});
