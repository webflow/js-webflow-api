/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { WebflowClient } from "../../src/Client";

describe("Scripts", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            registeredScripts: [
                {
                    id: "alert",
                    canCopy: false,
                    displayName: "Alert",
                    hostedLocation: "https://cdn.webflow.io/.../alert-0.0.1.js",
                    createdOn: "2022-10-26T00:28:54.191Z",
                    lastUpdated: "lastUpdated",
                    version: "0.0.1",
                },
                {
                    id: "alert",
                    canCopy: false,
                    displayName: "Alert",
                    hostedLocation: "https://cdn.webflow.io/.../alert-0.0.2.js",
                    createdOn: "2022-10-26T00:28:54.191Z",
                    lastUpdated: "lastUpdated",
                    version: "0.0.2",
                },
                {
                    id: "cms_slider",
                    canCopy: true,
                    displayName: "CMS Slider",
                    hostedLocation: "https://cdn.jsdelivr.net/.../cms_slider.js",
                    integrityHash: "sha384-J+YlJ8v0gpaRoKH7SbFbEmxOZlAxLiwNjfSsBhDooGa5roXlPPpXbEevck4J7YZ+",
                    createdOn: "2022-10-26T00:28:54.191Z",
                    lastUpdated: "lastUpdated",
                    version: "1.0.0",
                },
            ],
            pagination: { limit: 100, offset: 0, total: 3 },
        };
        server
            .mockEndpoint()
            .get("/sites/580e63e98c9a982ac9b8b741/registered_scripts")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.scripts.list("580e63e98c9a982ac9b8b741");
        expect(response).toEqual({
            registeredScripts: [
                {
                    id: "alert",
                    canCopy: false,
                    displayName: "Alert",
                    hostedLocation: "https://cdn.webflow.io/.../alert-0.0.1.js",
                    createdOn: "2022-10-26T00:28:54.191Z",
                    lastUpdated: "lastUpdated",
                    version: "0.0.1",
                },
                {
                    id: "alert",
                    canCopy: false,
                    displayName: "Alert",
                    hostedLocation: "https://cdn.webflow.io/.../alert-0.0.2.js",
                    createdOn: "2022-10-26T00:28:54.191Z",
                    lastUpdated: "lastUpdated",
                    version: "0.0.2",
                },
                {
                    id: "cms_slider",
                    canCopy: true,
                    displayName: "CMS Slider",
                    hostedLocation: "https://cdn.jsdelivr.net/.../cms_slider.js",
                    integrityHash: "sha384-J+YlJ8v0gpaRoKH7SbFbEmxOZlAxLiwNjfSsBhDooGa5roXlPPpXbEevck4J7YZ+",
                    createdOn: "2022-10-26T00:28:54.191Z",
                    lastUpdated: "lastUpdated",
                    version: "1.0.0",
                },
            ],
            pagination: {
                limit: 100,
                offset: 0,
                total: 3,
            },
        });
    });

    test("register-hosted", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = {
            hostedLocation: "hostedLocation",
            integrityHash: "integrityHash",
            version: "version",
            displayName: "displayName",
        };
        const rawResponseBody = {
            id: "cms_slider",
            canCopy: true,
            displayName: "CMS Slider",
            hostedLocation: "https://cdn.jsdelivr.net/.../cmsslider.js",
            integrityHash: "sha384-J+YlJ8v0gpaRoKH7SbFbEmxOZlAxLiwNjfSsBhDooGa5roXlPPpXbEevck4J7YZ+",
            createdOn: "2022-10-26T00:28:54.191Z",
            lastUpdated: "lastUpdated",
            version: "1.0.0",
        };
        server
            .mockEndpoint()
            .post("/sites/580e63e98c9a982ac9b8b741/registered_scripts/hosted")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.scripts.registerHosted("580e63e98c9a982ac9b8b741", {
            hostedLocation: "hostedLocation",
            integrityHash: "integrityHash",
            version: "version",
            displayName: "displayName",
        });
        expect(response).toEqual({
            id: "cms_slider",
            canCopy: true,
            displayName: "CMS Slider",
            hostedLocation: "https://cdn.jsdelivr.net/.../cmsslider.js",
            integrityHash: "sha384-J+YlJ8v0gpaRoKH7SbFbEmxOZlAxLiwNjfSsBhDooGa5roXlPPpXbEevck4J7YZ+",
            createdOn: "2022-10-26T00:28:54.191Z",
            lastUpdated: "lastUpdated",
            version: "1.0.0",
        });
    });

    test("register-inline", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });
        const rawRequestBody = { sourceCode: "alert('hello world');", version: "0.0.1", displayName: "Alert" };
        const rawResponseBody = {
            id: "alert",
            canCopy: false,
            displayName: "Alert",
            hostedLocation:
                "https://uploads-ssl.webflow.com/6258612d1ee792848f805dcf%2F64b6c769ff52ba6c3d904a91%2F660d6e15b3d1696f2d2b1447%2Falert-0.0.1.js",
            createdOn: "2022-10-26T00:28:54.191Z",
            lastUpdated: "lastUpdated",
            version: "0.0.1",
        };
        server
            .mockEndpoint()
            .post("/sites/580e63e98c9a982ac9b8b741/registered_scripts/inline")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.scripts.registerInline("580e63e98c9a982ac9b8b741", {
            sourceCode: "alert('hello world');",
            version: "0.0.1",
            displayName: "Alert",
        });
        expect(response).toEqual({
            id: "alert",
            canCopy: false,
            displayName: "Alert",
            hostedLocation:
                "https://uploads-ssl.webflow.com/6258612d1ee792848f805dcf%2F64b6c769ff52ba6c3d904a91%2F660d6e15b3d1696f2d2b1447%2Falert-0.0.1.js",
            createdOn: "2022-10-26T00:28:54.191Z",
            lastUpdated: "lastUpdated",
            version: "0.0.1",
        });
    });
});
