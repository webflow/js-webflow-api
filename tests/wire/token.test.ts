/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { WebflowClient } from "../../src/Client";

describe("Token", () => {
    test("authorized-by", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            id: "545bbecb7bdd6769632504a7",
            email: "some@email.com",
            firstName: "Some",
            lastName: "One",
        };
        server
            .mockEndpoint()
            .get("/token/authorized_by")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.token.authorizedBy();
        expect(response).toEqual({
            id: "545bbecb7bdd6769632504a7",
            email: "some@email.com",
            firstName: "Some",
            lastName: "One",
        });
    });

    test("introspect", async () => {
        const server = mockServerPool.createServer();
        const client = new WebflowClient({
            accessToken: "test",
            environment: {
                base: server.baseUrl,
                dataApi: server.baseUrl,
                contentDeliveryApi: server.baseUrl,
                production: server.baseUrl,
                cdn: server.baseUrl,
            },
        });

        const rawResponseBody = {
            authorization: {
                id: "55818d58616600637b9a5786",
                createdOn: "2016-10-03T23:12:00Z",
                lastUsed: "2016-10-10T21:41:12Z",
                grantType: "authorization_code",
                rateLimit: 60,
                scope: "assets:read,assets:write",
                authorizedTo: {
                    siteIds: ["62f3b1f7eafac55d0c64ef91"],
                    workspaceIds: ["52f3b1f7eafac55d0c64ef91"],
                    userIds: ["545bbecb7bdd6769632504a7"],
                },
            },
            application: {
                id: "55131cd036c09f7d07883dfc",
                description: "My Amazing App",
                homepage: "https://webflow.com",
                displayName: "My Amazing App",
            },
        };
        server.mockEndpoint().get("/token/introspect").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.token.introspect();
        expect(response).toEqual({
            authorization: {
                id: "55818d58616600637b9a5786",
                createdOn: new Date("2016-10-03T23:12:00.000Z"),
                lastUsed: new Date("2016-10-10T21:41:12.000Z"),
                grantType: "authorization_code",
                rateLimit: 60,
                scope: "assets:read,assets:write",
                authorizedTo: {
                    siteIds: ["62f3b1f7eafac55d0c64ef91"],
                    workspaceIds: ["52f3b1f7eafac55d0c64ef91"],
                    userIds: ["545bbecb7bdd6769632504a7"],
                },
            },
            application: {
                id: "55131cd036c09f7d07883dfc",
                description: "My Amazing App",
                homepage: "https://webflow.com",
                displayName: "My Amazing App",
            },
        });
    });
});
