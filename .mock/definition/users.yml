types:
  UsersListRequestSort:
    enum:
      - value: CreatedOn
        name: CreatedOnAscending
        docs: Sorts users in ascending order based on their created date
      - value: '-CreatedOn'
        name: CreatedOnDescending
        docs: Sorts users in descending order based on their created date
      - value: Email
        name: EmailAscending
        docs: Sorts users in ascending order based on their email
      - value: '-Email'
        name: EmailDescending
        docs: Sorts users in descending order based on their email
      - value: Status
        name: StatusAscending
        docs: Sorts users in ascending order based on their status
      - value: '-Status'
        name: StatusDescending
        docs: Sorts users in descending order based on their status
      - value: LastLogin
        name: LastLoginAscending
        docs: Sorts users in ascending order based on their last login date
      - value: '-LastLogin'
        name: LastLoginDescending
        docs: Sorts users in descending order based on their last login date
      - value: UpdatedOn
        name: UpdatedOnAscending
        docs: Sorts users in ascending order based on their update date
      - value: '-UpdatedOn'
        name: UpdatedOnDescending
        docs: Sorts users in descending order based on their update date
    source:
      openapi: ../../../openapi/referenced-specs/v2.yml
  UsersUpdateRequestData:
    properties:
      name:
        type: optional<string>
        docs: |
          The name of the user
      accept-privacy:
        type: optional<boolean>
        docs: |
          Boolean indicating if the user has accepted the privacy policy
      accept-communications:
        type: optional<boolean>
        docs: |
          Boolean indicating if the user has accepted to receive communications
    source:
      openapi: ../../../openapi/referenced-specs/v2.yml
    inline: true
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /sites/{site_id}/users
      method: GET
      auth: true
      docs: |
        Get a list of users for a site

        Required scope | `users:read`
      source:
        openapi: ../../../openapi/referenced-specs/v2.yml
      path-parameters:
        site_id:
          type: string
          docs: Unique identifier for a Site
      display-name: List Users
      request:
        name: UsersListRequest
        query-parameters:
          offset:
            type: optional<double>
            docs: >-
              Offset used for pagination if the results have more than limit
              records
          limit:
            type: optional<double>
            docs: 'Maximum number of records to be returned (max limit: 100)'
          sort:
            type: optional<UsersListRequestSort>
            docs: |
              Sort string to use when ordering users

              Example(`CreatedOn`, `Email`, `Status`, `LastLogin`, `UpdatedOn`).

              Can be prefixed with a `-` to reverse the sort (ex. `-CreatedOn`)
      response:
        docs: Request was successful
        type: root.UserList
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - path-parameters:
            site_id: 580e63e98c9a982ac9b8b741
          response:
            body:
              count: 5
              limit: 5
              offset: 0
              total: 201
              users:
                - id: 6287ec36a841b25637c663df
                  isEmailVerified: false
                  lastUpdated: '2022-05-20T13:46:12Z'
                  invitedOn: '2016-10-24T19:41:29Z'
                  createdOn: '2022-05-20T13:46:12Z'
                  lastLogin: '2016-10-24T19:41:29Z'
                  status: unverified
                  accessGroups:
                    - slug: vogon-construction-crew
                      type: admin
                - id: 6287ec36a841b25637c663f0
                  isEmailVerified: false
                  lastUpdated: '2022-05-19T05:32:04Z'
                  invitedOn: '2016-10-24T19:41:29Z'
                  createdOn: '2022-05-19T05:32:04Z'
                  lastLogin: '2016-10-24T19:41:29Z'
                  status: unverified
                  accessGroups:
                    - slug: improbability-drive-test-subjects
                      type: admin
                - id: 6287ec36a841b25637c663d9
                  isEmailVerified: true
                  lastUpdated: '2022-05-17T03:34:06Z'
                  invitedOn: '2016-10-24T19:41:29Z'
                  createdOn: '2022-05-17T03:34:06Z'
                  lastLogin: '2016-10-24T19:41:29Z'
                  status: verified
                  accessGroups:
                    - slug: heart-of-gold-crew
                      type: admin
                - id: 6287ec37a841b25637c6641b
                  isEmailVerified: false
                  lastUpdated: '2022-05-15T03:46:09Z'
                  invitedOn: '2016-10-24T19:41:29Z'
                  createdOn: '2022-05-15T03:46:09Z'
                  lastLogin: '2016-10-24T19:41:29Z'
                  status: unverified
                  accessGroups:
                    - slug: hitchhikers-guide-research-team
                      type: admin
                - id: 6287ec37a841b25637c66449
                  isEmailVerified: true
                  lastUpdated: '2022-05-15T02:55:38Z'
                  invitedOn: '2016-10-24T19:41:29Z'
                  createdOn: '2022-05-15T02:55:38Z'
                  lastLogin: '2016-10-24T19:41:29Z'
                  status: verified
                  accessGroups:
                    - slug: milliways-reservationists
                      type: admin
    get:
      path: /sites/{site_id}/users/{user_id}
      method: GET
      auth: true
      docs: |
        Get a User by ID

        Required scope | `users:read`
      source:
        openapi: ../../../openapi/referenced-specs/v2.yml
      path-parameters:
        site_id:
          type: string
          docs: Unique identifier for a Site
        user_id:
          type: string
          docs: Unique identifier for a User
      display-name: Get User
      response:
        docs: Request was successful
        type: root.User
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - path-parameters:
            site_id: 580e63e98c9a982ac9b8b741
            user_id: 580e63e98c9a982ac9b8b741
          response:
            body:
              id: 6287ec36a841b25637c663df
              isEmailVerified: true
              lastUpdated: '2022-05-20T13:46:12Z'
              invitedOn: '2022-05-20T13:46:12Z'
              createdOn: '2022-05-20T13:46:12Z'
              lastLogin: '2022-05-20T13:46:12Z'
              status: verified
              accessGroups:
                - slug: webflowers
                  type: admin
              data:
                data:
                  name: name
                  email: email
                  accept-privacy: true
                  accept-communications: true
                  additionalProperties: additionalProperties
    delete:
      path: /sites/{site_id}/users/{user_id}
      method: DELETE
      auth: true
      docs: |
        Delete a User by ID

        Required scope | `users:write`
      source:
        openapi: ../../../openapi/referenced-specs/v2.yml
      path-parameters:
        site_id:
          type: string
          docs: Unique identifier for a Site
        user_id:
          type: string
          docs: Unique identifier for a User
      display-name: Delete User
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - path-parameters:
            site_id: 580e63e98c9a982ac9b8b741
            user_id: 580e63e98c9a982ac9b8b741
    update:
      path: /sites/{site_id}/users/{user_id}
      method: PATCH
      auth: true
      docs: |
        Update a User by ID 

          Required scope | `users:write`

        <Note class="notice">The <code>email</code> and <code>password</code>
        fields cannot be updated using this endpoint</Note>
      source:
        openapi: ../../../openapi/referenced-specs/v2.yml
      path-parameters:
        site_id:
          type: string
          docs: Unique identifier for a Site
        user_id:
          type: string
          docs: Unique identifier for a User
      display-name: Update User
      request:
        name: UsersUpdateRequest
        body:
          properties:
            data: optional<UsersUpdateRequestData>
            accessGroups:
              type: optional<list<string>>
              docs: >
                An array of access group slugs. Access groups are assigned to
                the user as type `admin` and the user remains in the group until
                removed.
        content-type: application/json
      response:
        docs: Request was successful
        type: root.User
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - path-parameters:
            site_id: 580e63e98c9a982ac9b8b741
            user_id: 580e63e98c9a982ac9b8b741
          request:
            data:
              name: Some One
              accept-privacy: false
              accept-communications: false
            accessGroups:
              - webflowers
              - platinum
              - free-tier
          response:
            body:
              id: 6287ec36a841b25637c663df
              isEmailVerified: true
              lastUpdated: '2022-05-20T13:46:12Z'
              invitedOn: '2022-05-20T13:46:12Z'
              createdOn: '2022-05-20T13:46:12Z'
              lastLogin: '2022-05-20T13:46:12Z'
              status: verified
              accessGroups:
                - slug: webflowers
                  type: admin
              data:
                data:
                  name: name
                  email: email
                  accept-privacy: true
                  accept-communications: true
                  additionalProperties: additionalProperties
    invite:
      path: /sites/{site_id}/users/invite
      method: POST
      auth: true
      docs: >
        Create and invite a user with an email address. 


        The user will be sent and invite via email, which they will need to
        accept in order to join paid any paid access group. 


        Required scope | `users:write`
      source:
        openapi: ../../../openapi/referenced-specs/v2.yml
      path-parameters:
        site_id:
          type: string
          docs: Unique identifier for a Site
      display-name: Create and Invite a User
      request:
        name: UsersInviteRequest
        body:
          properties:
            email:
              type: string
              docs: Email address of user to send invite to
              validation:
                format: email
            accessGroups:
              type: optional<list<string>>
              docs: >
                An array of access group slugs. Access groups are assigned to
                the user as type `admin` and the user remains in the group until
                removed.
        content-type: application/json
      response:
        docs: Request was successful
        type: root.User
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.ConflictError
        - root.TooManyRequestsError
        - root.InternalServerError
      examples:
        - path-parameters:
            site_id: 580e63e98c9a982ac9b8b741
          request:
            email: some.one@home.com
            accessGroups:
              - webflowers
          response:
            body:
              id: 6287ec36a841b25637c663df
              isEmailVerified: true
              lastUpdated: '2022-05-20T13:46:12Z'
              invitedOn: '2022-05-20T13:46:12Z'
              createdOn: '2022-05-20T13:46:12Z'
              lastLogin: '2022-05-20T13:46:12Z'
              status: verified
              accessGroups:
                - slug: webflowers
                  type: admin
              data:
                data:
                  name: name
                  email: email
                  accept-privacy: true
                  accept-communications: true
                  additionalProperties: additionalProperties
  source:
    openapi: ../../../openapi/referenced-specs/v2.yml
