/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Webflow from "../../../../api/index";
import * as core from "../../../../core";
import { OrdersUpdateUnfulfillResponseStatus } from "./OrdersUpdateUnfulfillResponseStatus";
import { OrdersUpdateUnfulfillResponseDisputeLastStatus } from "./OrdersUpdateUnfulfillResponseDisputeLastStatus";
import { OrdersUpdateUnfulfillResponseCustomerPaid } from "./OrdersUpdateUnfulfillResponseCustomerPaid";
import { OrdersUpdateUnfulfillResponseNetAmount } from "./OrdersUpdateUnfulfillResponseNetAmount";
import { OrdersUpdateUnfulfillResponseApplicationFee } from "./OrdersUpdateUnfulfillResponseApplicationFee";
import { OrdersUpdateUnfulfillResponseAllAddressesItem } from "./OrdersUpdateUnfulfillResponseAllAddressesItem";
import { OrdersUpdateUnfulfillResponseShippingAddress } from "./OrdersUpdateUnfulfillResponseShippingAddress";
import { OrdersUpdateUnfulfillResponseBillingAddress } from "./OrdersUpdateUnfulfillResponseBillingAddress";
import { OrdersUpdateUnfulfillResponseCustomerInfo } from "./OrdersUpdateUnfulfillResponseCustomerInfo";
import { OrdersUpdateUnfulfillResponsePurchasedItemsItem } from "./OrdersUpdateUnfulfillResponsePurchasedItemsItem";
import { OrdersUpdateUnfulfillResponseStripeDetails } from "./OrdersUpdateUnfulfillResponseStripeDetails";
import { OrdersUpdateUnfulfillResponseStripeCard } from "./OrdersUpdateUnfulfillResponseStripeCard";
import { OrdersUpdateUnfulfillResponsePaypalDetails } from "./OrdersUpdateUnfulfillResponsePaypalDetails";
import { OrdersUpdateUnfulfillResponseMetadata } from "./OrdersUpdateUnfulfillResponseMetadata";
import { OrdersUpdateUnfulfillResponseTotals } from "./OrdersUpdateUnfulfillResponseTotals";
import { OrdersUpdateUnfulfillResponseDownloadFilesItem } from "./OrdersUpdateUnfulfillResponseDownloadFilesItem";

export const OrdersUpdateUnfulfillResponse: core.serialization.ObjectSchema<
    serializers.OrdersUpdateUnfulfillResponse.Raw,
    Webflow.OrdersUpdateUnfulfillResponse
> = core.serialization.object({
    orderId: core.serialization.string().optional(),
    status: OrdersUpdateUnfulfillResponseStatus.optional(),
    comment: core.serialization.string().optional(),
    orderComment: core.serialization.string().optional(),
    acceptedOn: core.serialization.date().optional(),
    fulfilledOn: core.serialization.date().optional(),
    refundedOn: core.serialization.date().optional(),
    disputedOn: core.serialization.date().optional(),
    disputeUpdatedOn: core.serialization.date().optional(),
    disputeLastStatus: OrdersUpdateUnfulfillResponseDisputeLastStatus.optional(),
    customerPaid: OrdersUpdateUnfulfillResponseCustomerPaid.optional(),
    netAmount: OrdersUpdateUnfulfillResponseNetAmount.optional(),
    applicationFee: OrdersUpdateUnfulfillResponseApplicationFee.optional(),
    allAddresses: core.serialization.list(OrdersUpdateUnfulfillResponseAllAddressesItem).optional(),
    shippingAddress: OrdersUpdateUnfulfillResponseShippingAddress.optional(),
    billingAddress: OrdersUpdateUnfulfillResponseBillingAddress.optional(),
    shippingProvider: core.serialization.string().optional(),
    shippingTracking: core.serialization.string().optional(),
    shippingTrackingUrl: core.serialization.property("shippingTrackingURL", core.serialization.string().optional()),
    customerInfo: OrdersUpdateUnfulfillResponseCustomerInfo.optional(),
    purchasedItems: core.serialization.list(OrdersUpdateUnfulfillResponsePurchasedItemsItem).optional(),
    purchasedItemsCount: core.serialization.number().optional(),
    stripeDetails: OrdersUpdateUnfulfillResponseStripeDetails.optional(),
    stripeCard: OrdersUpdateUnfulfillResponseStripeCard.optional(),
    paypalDetails: OrdersUpdateUnfulfillResponsePaypalDetails.optional(),
    customData: core.serialization
        .list(core.serialization.record(core.serialization.string(), core.serialization.unknown()))
        .optional(),
    metadata: OrdersUpdateUnfulfillResponseMetadata.optional(),
    isCustomerDeleted: core.serialization.boolean().optional(),
    isShippingRequired: core.serialization.boolean().optional(),
    hasDownloads: core.serialization.boolean().optional(),
    paymentProcessor: core.serialization.string().optional(),
    totals: OrdersUpdateUnfulfillResponseTotals.optional(),
    downloadFiles: core.serialization.list(OrdersUpdateUnfulfillResponseDownloadFilesItem).optional(),
});

export declare namespace OrdersUpdateUnfulfillResponse {
    interface Raw {
        orderId?: string | null;
        status?: OrdersUpdateUnfulfillResponseStatus.Raw | null;
        comment?: string | null;
        orderComment?: string | null;
        acceptedOn?: string | null;
        fulfilledOn?: string | null;
        refundedOn?: string | null;
        disputedOn?: string | null;
        disputeUpdatedOn?: string | null;
        disputeLastStatus?: OrdersUpdateUnfulfillResponseDisputeLastStatus.Raw | null;
        customerPaid?: OrdersUpdateUnfulfillResponseCustomerPaid.Raw | null;
        netAmount?: OrdersUpdateUnfulfillResponseNetAmount.Raw | null;
        applicationFee?: OrdersUpdateUnfulfillResponseApplicationFee.Raw | null;
        allAddresses?: OrdersUpdateUnfulfillResponseAllAddressesItem.Raw[] | null;
        shippingAddress?: OrdersUpdateUnfulfillResponseShippingAddress.Raw | null;
        billingAddress?: OrdersUpdateUnfulfillResponseBillingAddress.Raw | null;
        shippingProvider?: string | null;
        shippingTracking?: string | null;
        shippingTrackingURL?: string | null;
        customerInfo?: OrdersUpdateUnfulfillResponseCustomerInfo.Raw | null;
        purchasedItems?: OrdersUpdateUnfulfillResponsePurchasedItemsItem.Raw[] | null;
        purchasedItemsCount?: number | null;
        stripeDetails?: OrdersUpdateUnfulfillResponseStripeDetails.Raw | null;
        stripeCard?: OrdersUpdateUnfulfillResponseStripeCard.Raw | null;
        paypalDetails?: OrdersUpdateUnfulfillResponsePaypalDetails.Raw | null;
        customData?: Record<string, unknown>[] | null;
        metadata?: OrdersUpdateUnfulfillResponseMetadata.Raw | null;
        isCustomerDeleted?: boolean | null;
        isShippingRequired?: boolean | null;
        hasDownloads?: boolean | null;
        paymentProcessor?: string | null;
        totals?: OrdersUpdateUnfulfillResponseTotals.Raw | null;
        downloadFiles?: OrdersUpdateUnfulfillResponseDownloadFilesItem.Raw[] | null;
    }
}
