/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Token } from "./api/resources/token/client/Client";
import { Sites } from "./api/resources/sites/client/Client";
import { Collections } from "./api/resources/collections/client/Client";
import { Pages } from "./api/resources/pages/client/Client";
import { Components } from "./api/resources/components/client/Client";
import { Scripts } from "./api/resources/scripts/client/Client";
import { Assets } from "./api/resources/assets/client/Client";
import { Webhooks } from "./api/resources/webhooks/client/Client";
import { Forms } from "./api/resources/forms/client/Client";
import { Users } from "./api/resources/users/client/Client";
import { AccessGroups } from "./api/resources/accessGroups/client/Client";
import { Products } from "./api/resources/products/client/Client";
import { Orders } from "./api/resources/orders/client/Client";
import { Inventory } from "./api/resources/inventory/client/Client";
import { Ecommerce } from "./api/resources/ecommerce/client/Client";

export declare namespace WebflowClient {
    interface Options {
        environment?: core.Supplier<environments.WebflowEnvironment | string>;
        accessToken: core.Supplier<core.BearerToken>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class WebflowClient {
    constructor(protected readonly _options: WebflowClient.Options) {}

    protected _token: Token | undefined;

    public get token(): Token {
        return (this._token ??= new Token(this._options));
    }

    protected _sites: Sites | undefined;

    public get sites(): Sites {
        return (this._sites ??= new Sites(this._options));
    }

    protected _collections: Collections | undefined;

    public get collections(): Collections {
        return (this._collections ??= new Collections(this._options));
    }

    protected _pages: Pages | undefined;

    public get pages(): Pages {
        return (this._pages ??= new Pages(this._options));
    }

    protected _components: Components | undefined;

    public get components(): Components {
        return (this._components ??= new Components(this._options));
    }

    protected _scripts: Scripts | undefined;

    public get scripts(): Scripts {
        return (this._scripts ??= new Scripts(this._options));
    }

    protected _assets: Assets | undefined;

    public get assets(): Assets {
        return (this._assets ??= new Assets(this._options));
    }

    protected _webhooks: Webhooks | undefined;

    public get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this._options));
    }

    protected _forms: Forms | undefined;

    public get forms(): Forms {
        return (this._forms ??= new Forms(this._options));
    }

    protected _users: Users | undefined;

    public get users(): Users {
        return (this._users ??= new Users(this._options));
    }

    protected _accessGroups: AccessGroups | undefined;

    public get accessGroups(): AccessGroups {
        return (this._accessGroups ??= new AccessGroups(this._options));
    }

    protected _products: Products | undefined;

    public get products(): Products {
        return (this._products ??= new Products(this._options));
    }

    protected _orders: Orders | undefined;

    public get orders(): Orders {
        return (this._orders ??= new Orders(this._options));
    }

    protected _inventory: Inventory | undefined;

    public get inventory(): Inventory {
        return (this._inventory ??= new Inventory(this._options));
    }

    protected _ecommerce: Ecommerce | undefined;

    public get ecommerce(): Ecommerce {
        return (this._ecommerce ??= new Ecommerce(this._options));
    }
}
